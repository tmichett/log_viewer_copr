#!/usr/bin/env python3
"""
LogViewer - A GUI application for viewing and searching through log files
with ANSI color support and configurable highlighting.
"""

import sys
import os
import yaml
import argparse
from pathlib import Path

try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QTextEdit, QVBoxLayout, 
                                QWidget, QMenuBar, QFileDialog, QStatusBar, 
                                QHBoxLayout, QLineEdit, QPushButton, QCheckBox,
                                QMessageBox, QDialog, QLabel, QGridLayout,
                                QColorDialog, QListWidget, QListWidgetItem)
    from PyQt5.QtCore import Qt, QTimer, pyqtSignal
    from PyQt5.QtGui import QFont, QTextCharFormat, QColor, QKeySequence, QIcon
except ImportError:
    try:
        from PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit, QVBoxLayout, 
                                    QWidget, QMenuBar, QFileDialog, QStatusBar, 
                                    QHBoxLayout, QLineEdit, QPushButton, QCheckBox,
                                    QMessageBox, QDialog, QLabel, QGridLayout,
                                    QColorDialog, QListWidget, QListWidgetItem)
        from PyQt6.QtCore import Qt, QTimer, pyqtSignal
        from PyQt6.QtGui import QFont, QTextCharFormat, QColor, QKeySequence, QIcon
    except ImportError:
        print("Error: PyQt5 or PyQt6 is required to run LogViewer")
        sys.exit(1)

class LogViewer(QMainWindow):
    def __init__(self, config_file=None, log_file=None):
        super().__init__()
        self.config_file = config_file or "/opt/LogViewer/config.yml"
        self.config = self.load_config()
        self.init_ui()
        
        if log_file:
            self.open_file(log_file)
    
    def load_config(self):
        """Load configuration from YAML file"""
        default_config = {
            'display': {
                'font_family': 'Consolas',
                'font_size': 12,
                'background_color': '#ffffff',
                'text_color': '#000000'
            },
            'highlighting': {
                'enabled': True,
                'terms': [
                    {'pattern': 'ERROR', 'color': '#ff0000', 'background': '#ffdddd'},
                    {'pattern': 'WARNING', 'color': '#ff8800', 'background': '#fff3dd'},
                    {'pattern': 'INFO', 'color': '#0088ff', 'background': '#ddddff'},
                    {'pattern': 'DEBUG', 'color': '#888888', 'background': '#f5f5f5'}
                ]
            },
            'search': {
                'case_sensitive': False,
                'regex_enabled': False,
                'highlight_all': True
            },
            'ui': {
                'window_width': 1200,
                'window_height': 800,
                'show_line_numbers': True,
                'wrap_text': False
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = yaml.safe_load(f)
                    # Merge with defaults
                    for key in default_config:
                        if key not in config:
                            config[key] = default_config[key]
                    return config
        except Exception as e:
            print(f"Error loading config file: {e}")
        
        return default_config
    
    def init_ui(self):
        """Initialize the user interface"""
        self.setWindowTitle("LogViewer")
        self.setGeometry(100, 100, 
                        self.config['ui']['window_width'], 
                        self.config['ui']['window_height'])
        
        # Create central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Create layout
        layout = QVBoxLayout()
        central_widget.setLayout(layout)
        
        # Create menu bar
        self.create_menu_bar()
        
        # Create search bar
        self.create_search_bar(layout)
        
        # Create text display
        self.text_display = QTextEdit()
        self.text_display.setReadOnly(True)
        self.text_display.setFont(QFont(
            self.config['display']['font_family'],
            self.config['display']['font_size']
        ))
        layout.addWidget(self.text_display)
        
        # Create status bar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("Ready")
    
    def create_menu_bar(self):
        """Create the menu bar"""
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu('File')
        file_menu.addAction('Open', self.open_file_dialog, QKeySequence.Open)
        file_menu.addSeparator()
        file_menu.addAction('Exit', self.close, QKeySequence.Quit)
        
        # Search menu
        search_menu = menubar.addMenu('Search')
        search_menu.addAction('Find', self.focus_search, QKeySequence.Find)
        search_menu.addAction('Find Next', self.find_next, QKeySequence.FindNext)
        search_menu.addAction('Find Previous', self.find_previous, QKeySequence.FindPrevious)
        
        # Help menu
        help_menu = menubar.addMenu('Help')
        help_menu.addAction('About', self.show_about)
    
    def create_search_bar(self, layout):
        """Create the search bar"""
        search_layout = QHBoxLayout()
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search...")
        self.search_input.returnPressed.connect(self.find_next)
        
        self.find_button = QPushButton("Find")
        self.find_button.clicked.connect(self.find_next)
        
        self.case_sensitive_cb = QCheckBox("Case Sensitive")
        
        search_layout.addWidget(QLabel("Search:"))
        search_layout.addWidget(self.search_input)
        search_layout.addWidget(self.find_button)
        search_layout.addWidget(self.case_sensitive_cb)
        search_layout.addStretch()
        
        layout.addLayout(search_layout)
    
    def open_file_dialog(self):
        """Open file dialog to select a log file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Open Log File", "", "All Files (*)")
        if file_path:
            self.open_file(file_path)
    
    def open_file(self, file_path):
        """Open and display a log file"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                content = f.read()
            
            self.text_display.setPlainText(content)
            self.apply_highlighting()
            self.status_bar.showMessage(f"Loaded: {file_path}")
            self.setWindowTitle(f"LogViewer - {os.path.basename(file_path)}")
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to open file: {str(e)}")
    
    def apply_highlighting(self):
        """Apply syntax highlighting based on configuration"""
        if not self.config['highlighting']['enabled']:
            return
        
        # This is a simplified highlighting implementation
        # In a full implementation, you would use QSyntaxHighlighter
        pass
    
    def focus_search(self):
        """Focus the search input"""
        self.search_input.setFocus()
        self.search_input.selectAll()
    
    def find_next(self):
        """Find next occurrence of search text"""
        search_text = self.search_input.text()
        if not search_text:
            return
        
        flags = 0
        if self.case_sensitive_cb.isChecked():
            flags |= QTextDocument.FindCaseSensitively
        
        if not self.text_display.find(search_text, flags):
            # If not found, start from beginning
            cursor = self.text_display.textCursor()
            cursor.movePosition(cursor.Start)
            self.text_display.setTextCursor(cursor)
            self.text_display.find(search_text, flags)
    
    def find_previous(self):
        """Find previous occurrence of search text"""
        search_text = self.search_input.text()
        if not search_text:
            return
        
        flags = QTextDocument.FindBackward
        if self.case_sensitive_cb.isChecked():
            flags |= QTextDocument.FindCaseSensitively
        
        if not self.text_display.find(search_text, flags):
            # If not found, start from end
            cursor = self.text_display.textCursor()
            cursor.movePosition(cursor.End)
            self.text_display.setTextCursor(cursor)
            self.text_display.find(search_text, flags)
    
    def show_about(self):
        """Show about dialog"""
        QMessageBox.about(self, "About LogViewer", 
                         "LogViewer v3.7.1\n\n"
                         "A GUI application for viewing and searching through log files "
                         "with ANSI color support and configurable highlighting.\n\n"
                         "Â© 2024 Log Viewer Build")

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description='LogViewer - GUI Log File Viewer')
    parser.add_argument('--config', help='Path to configuration file')
    parser.add_argument('file', nargs='?', help='Log file to open')
    
    args = parser.parse_args()
    
    app = QApplication(sys.argv)
    app.setApplicationName("LogViewer")
    app.setApplicationVersion("3.7.1")
    
    window = LogViewer(config_file=args.config, log_file=args.file)
    window.show()
    
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
